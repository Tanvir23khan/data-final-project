// rename this to app.js and put in a real IdentityPoolId
document.getElementById("fileToUpload").addEventListener("change", function (event) {
  ProcessImage();
}, false);

//Calls DetectFaces API and shows estimated ages of detected faces
function DetectFaces(imageData) {
  AWS.region = "RegionToUse";
  var rekognition = new AWS.Rekognition();
  var params = {
    Image: {
      Bytes: imageData
    },
    Attributes: [
      'ALL',
    ]
  };
  rekognition.detectFaces(params, function (err, data) {
    if (err) console.log(err, err.stack); // an error occurred
    else {
      document.getElementById("dataFace").innerHTML = '<h2>Face Details</h2>' + JSON.stringify(data);
      var table = "<table><tr><th>Key</th><th>Value</th></tr>";
      // show each face and build out estimated age table
      for (var i = 0; i < data.FaceDetails.length; i++) {
        table += '<tr><td>AgeRange.Low:</td><td>' + data.FaceDetails[i].AgeRange.Low + '</td></tr>' +
                  '<tr><td>AgeRange.High:</td><td>' + data.FaceDetails[i].AgeRange.High + '</td></tr>' +
                  '<tr><td>Emotions.Type:</td><td>' + data.FaceDetails[i].Emotions[0].Type + '</td></tr>' +
                  '<tr><td>Emotions.Confidence:</td><td>' + data.FaceDetails[i].Emotions[0].Confidence + '</td></tr>' +
                  '<tr><td>Gender:</td><td>' + data.FaceDetails[i].Gender.Value + '</td></tr>' +
                  '<tr><td>Gender.Confidence:</td><td>' + data.FaceDetails[i].Gender.Confidence + '</td></tr>' +
                  '<tr><td>Beard:</td><td>' + data.FaceDetails[i].Beard.Value + '</td></tr>' +
                  '<tr><td>Eyeglasses:</td><td>' + data.FaceDetails[i].Eyeglasses.Value + '</td></tr>' +
                  '<tr><td>Smile:</td><td>' + data.FaceDetails[i].Smile.Value + '</td></tr>' +
                  '<tr><td>-------------------</td></tr>';
      }

      table += "</table>";
      document.getElementById("opResult").innerHTML = table;
    }
  });

  var celeParams = {
      Image: {
        Bytes: imageData
      }
    };
  
  // get celebrity information
  rekognition.recognizeCelebrities(celeParams, function (err, data) {
      if (err) console.log(err, err.stack); // an error occurred
      else {
          document.getElementById("dataCele").innerHTML = '<h2>Celebrity Info</h2>' + JSON.stringify(data);
          var celeInfo = ""
          for (var i = 0; i < data.CelebrityFaces.length; i++) {
              celeInfo += "<p>Name: " + data.CelebrityFaces[i].Name + '</p>' +
                              "<p>MatchConfidence: " + data.CelebrityFaces[i].MatchConfidence + '</p>' +
                              "<p>Urls: <a target=”_blank” href=https://" + data.CelebrityFaces[i].Urls + '>' +  
                              data.CelebrityFaces[i].Urls + '</a></p>' +
                              '<p>---------------------</p>';
          }
          document.getElementById("celeInfo").innerHTML = celeInfo;
      }
  });
}

//Loads selected image and unencodes image bytes for Rekognition DetectFaces API
function ProcessImage() {
  AnonLog();
  var control = document.getElementById("fileToUpload");
  var file = control.files[0];
  var photo = document.getElementById("photo");
  photo.src = URL.createObjectURL(file);
  
  // Load base64 encoded image 
  var reader = new FileReader();
  reader.onload = (function (theFile) {
    return function (e) {
      var img = document.createElement('img');
      var image = null;
      img.src = e.target.result;
      
      var jpg = true;
      try {
        image = atob(e.target.result.split("data:image/jpeg;base64,")[1]);

      } catch (e) {
        jpg = false;
      }
      if (jpg == false) {
        try {
          image = atob(e.target.result.split("data:image/png;base64,")[1]);
        } catch (e) {
          alert("Not an image file Rekognition can process");
          return;
        }
      }
      //unencode image bytes for Rekognition DetectFaces API 
      var length = image.length;
      imageBytes = new ArrayBuffer(length);
      var ua = new Uint8Array(imageBytes);
      for (var i = 0; i < length; i++) {
        ua[i] = image.charCodeAt(i);
      }
      //Call Rekognition  
      DetectFaces(imageBytes);
    };
  })(file);

  reader.readAsDataURL(file);
  var submitBtn = document.getElementById("submitBtn");
  submitBtn.disabled = false;
}
//Provides anonymous log on to AWS services
function AnonLog() {
  
  // Configure the credentials provider to use your identity pool
  AWS.config.region = 'us-east-1'; // Region
  AWS.config.credentials = new AWS.CognitoIdentityCredentials({
    IdentityPoolId: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
  });
  // Make the call to obtain credentials
  AWS.config.credentials.get(function () {
    // Credentials will be available when this function is called.
    var accessKeyId = AWS.config.credentials.accessKeyId;
    var secretAccessKey = AWS.config.credentials.secretAccessKey;
    var sessionToken = AWS.config.credentials.sessionToken;
  });
}